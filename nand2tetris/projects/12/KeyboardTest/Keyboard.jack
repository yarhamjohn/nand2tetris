// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        var char result;

        let result = Memory.peek(24576);

        return result;
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char c;

        while (Keyboard.keyPressed() = 0)
        {
            // no key pressed so do nothing
        }

        let c = Keyboard.keyPressed();

        while (Keyboard.keyPressed() > 0)
        {
            // wait for key to be unpressed
        }

        do Output.printChar(c);

        return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String result, temp;
        var char c;
        var int maxLength, i;

        let maxLength = 1;

        do Output.printString(message);

        let result = String.new(1);

        while (true) {
            let c = Keyboard.readChar();

            if (c = 128)
            {
                do Output.println();
                return result;
            }

            if (c = 129)
            {
                let result = result.eraseLastChar();
            }
            else
            {
                // Increase the size of the result if required
                if (result.length() = maxLength) {
                    let temp = result;
                    let maxLength = maxLength + 1;
                    let result = String.new(maxLength);
                    
                    let i = 0;
                    while (i < temp.length()) {
                        do result.appendChar(temp.charAt(i));
                        let i = i + 1;
                    }
                }

                let result = result.appendChar(c);
            }
        }

        return result;    
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var int result, maxLength, i;
        var String input, temp;
        var char c;

        do Output.printString(message);
        
        let input = String.new(1);

        while (true) {
            let c = Keyboard.readChar();

            if (c = 128)
            {
                do Output.println();

                let result = input.intValue();

                return result;
            }

            if (c = 129)
            {
                let input = result.eraseLastChar();
            }
            else
            {
                // Increase the size of the input if required
                if (input.length() = maxLength) {
                    let temp = input;
                    let maxLength = maxLength + 1;
                    let input = String.new(maxLength);
                    
                    let i = 0;
                    while (i < temp.length()) {
                        do input.appendChar(temp.charAt(i));
                        let i = i + 1;
                    }
                }

                let input = input.appendChar(c);
            }
        }

        let result = input.intValue();
        return result;
    }
}
