// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);

        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return x * -1;
        }
        else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedx, i;

        let sum = 0;
        let shiftedx = x;
        let i = 0;

        while (i < 16) { 
            if (Math.bit(y, i)) {
                let sum = sum + shiftedx;
            }
            
            let shiftedx = shiftedx + shiftedx;

            let i = i + 1;
        }
        
        return sum;
    }

    /** Returns true if the ith bit of val is 1 */
    function boolean bit(int val, int i) {
        return val & twoToThe[i] = twoToThe[i]; // ~((val & twoToThe[i]) = 0);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int sum, absx, absy;

        let absx = Math.abs(x);
        let absy = Math.abs(y);

        if (absy > absx) {
            return 0; // drop the remainder
        }

        let sum = Math.divide(absx, absy + absy);

        if (absx - (2 * sum * absy) < absy) {
            let sum = sum + sum;
        } else {
            let sum = sum + sum + 1;
        }

        if (x < 0) {
            return sum * -1;
        }
        else {
            return sum;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y, t;

        let y = 0;
        let j = 7;
        
        while (j > -1) {
            let t = ((y + twoToThe[j]) * (y + twoToThe[j])) - 1;
            if (t < x & t > 0) {
                let y = y + (twoToThe[j]);
            }

            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
