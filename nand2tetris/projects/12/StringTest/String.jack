// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array charArray;
    field int maxLength, currentLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let charArray = Array.new(maxLength);
        }
        else {
            let charArray = Array.new(1);
        }
        let maxLength = maxLength;
        let currentLength = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        let maxLength = 0;
        let currentLength = 0;
        do charArray.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return charArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let charArray[j] = c;

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var Array temp;
        var int i;

        let i = 0;
        if (currentLength = maxLength) {
            let temp = Array.new(currentLength + 1);
            while (i < currentLength) {
                let temp[i] = charArray[i];
                let i = i + 1;
            }

            let charArray = temp;

            let maxLength = currentLength + 1;
        }

        let charArray[currentLength] = c;
        let currentLength = currentLength + 1;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        var Array tempArray;
        var int i;

        let currentLength = currentLength - 1;

        let tempArray = Array.new(currentLength);

        let i = 0;
        while (i < currentLength) {
            let tempArray[i] = charArray[i];
            let i = i + 1;
        }

        let charArray = tempArray;

        return;
    }

    /** Returns the integer value of this string, until a non-digit character is detected. */
    method int intValue() {
        var int i, c, result;
        var boolean isNeg;

        let result = 0;
        let i = 0;
        
        if (charAt(0) = 45) { // ascii for "-"
            let isNeg = true;
            let i = 1;
        }
        else {
            let isNeg = false;
            let i = 0;
        }

        while (i < currentLength) {
            let c = charAt(i) - 48;
            let result = result * 10 + c;
            let i = i + 1;
        }

        if (isNeg) {
            return result * -1;
        }
        else {
            return result;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var String result;
        var int i;
        var char t;

        if (val < 0) {
            let result = positiveIntToString((val * -1));
            let charArray = Array.new(result.length() + 1);

            let charArray[0] = 45; // ascii for "-"
            let i = 1;

            while (i < (result.length() + 1)) {
                let charArray[i] = result.charAt(i - 1);
                let i = i + 1;
            }

            let maxLength = result.length() + 1;
            let currentLength = result.length() + 1;
        }
        else {
            let result = positiveIntToString(val);
            let charArray = Array.new(result.length());
            let i = 0;

            while (i < result.length()) {
                let charArray[i] = result.charAt(i);
                let i = i + 1;
            }

            let maxLength = result.length();
            let currentLength = result.length();
        }

        return;
    }

    method String positiveIntToString(int val) {
        var int lastDigit;
        var char c;
        var String result;

        let lastDigit = val - ((val / 10) * 10); // take advantage of rounding during division
        let c = (lastDigit + 48);

        if (val < 10) {
            let result = String.new(1);
            do result.appendChar(c);
            return result;
        }
        else {
            let result = positiveIntToString(val / 10);
            do result.appendChar(c);
            return result;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
